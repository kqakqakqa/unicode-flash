/* variables */

:root {
    --sceneSizeFactor: calc(min(var(--sceneMaxWidth) / 297, var(--sceneMaxHeight) / 210));
    --sceneWidth: calc(var(--sceneSizeFactor) * 297);
    --sceneHeight: calc(var(--sceneSizeFactor) * 210);
    --sceneMaxHeightScaledFromWidth: calc(var(--sceneMaxWidth) / 297 * 210);
    --bodyMargin: 16px;
}

/* general */

*:not(#scene) h2 {
    margin: 0;
    font-weight: normal;
}

input.textInput {
    font-size: 1rem;
    line-height: 2;
    background-color: #fafafa;
    border: 1px solid #ccc;
    border-radius: 4px;
}

input.switchInput {
    /* appearance: none; */
    margin: 0;
    width: 1rem;
    height: 1rem;
}

textarea.textInput {
    resize: vertical;
    font-size: 1rem;
    line-height: 1.5;
    background-color: #fafafa;
    border: 1px solid #ccc;
    border-radius: 4px;
}

textarea.textInput:not(.monospaceInput) {
    font-family: initial;
}

.monospaceInput,
.charCode0x {
    font-family: Consolas, monospace;
}

/* input.switchInput::before {
    content: "";
    display: block;
    width: 3rem;
    height: 1.5rem;
    background-color: #ccc;
    border-left: 2rem solid #000;
    border-right: 2px solid #000;
    border-top: 2px solid #000;
    border-bottom: 2px solid #000;
    box-sizing: border-box;
    border-radius: 2rem;
} */

*:not(#scene) button {
    font-size: 1rem;
    line-height: 2;
}

/* body */

body {
    /* font-size: 0; */
    margin-top: var(--bodyMargin);
    margin-left: var(--bodyMargin);
    margin-right: var(--bodyMargin);
    margin-bottom: 0;
    /* overflow-x: hidden; */
}

/* inputs grid */

div.inputs {
    display: grid;
    grid-template-columns: auto auto;
    align-items: center;
    row-gap: 0.5rem;
    column-gap: 1rem;
}

/* scene edit */

/* scene edit - sequence edit */

#sequenceEdit {
    width: min(100%, 20rem);
}

#sequence {
    border: 1px solid #ccc;
    border-radius: 4px;
    overflow: auto;
}

#sequence>.componentInSequence {
    line-height: 2;
    padding-left: 0.5rem;
    padding-right: 0.5rem;
    cursor: default;
    background-color: #fafafa;
}

#sequence>.componentInSequence:hover {
    background-color: #eee;
}

/* scene edit - component edit */

/* scene edit - component edit - align edit */

#alignEdit {
    display: grid;
    height: fit-content;
    width: fit-content;
    grid-template-columns: 1fr auto 1fr auto 1fr;
    grid-template-rows: 1fr auto 1fr auto 1fr;
    align-items: center;
    justify-items: center;
    user-select: none;
}

.alignEditCell {
    display: block;
    width: 1rem;
    height: 1rem;
    border-radius: 2px;
    border: 1px solid #888;
    background-color: #fafafa;
}

.alignEditCell>input {
    appearance: none;
    /* opacity: 0; */
}

.alignEditCell:has(input:hover) {
    background-color: #eee;
}

.alignEditCell:has(input:focus-visible) {
    outline: auto;
}

.alignEditCell:has(input:checked) {
    /* border: 1px solid #888; */
    background-color: #888;
}

.alignEditHorizontal {
    background-color: #aaa;
    width: 0.25rem;
    height: 1px;
}

.alignEditVertical {
    background-color: #aaa;
    width: 1px;
    height: 0.25rem;
}

.alignEditNone {
    border: 1px transparent;
}

/* player edit */

#playerEdit {
    width: fit-content;
    grid-template-columns: auto 6rem;
}

#playerEdit input {
    width: 100%;
}

/* play pause panel */

/* body.sceneUpToDate #button_resetFlash {
    display: none;
} */

/* scene */

#sceneMaxSize {
    width: calc(100% + 2 * var(--bodyMargin));
    height: calc(min((var(--sceneMaxHeightScaledFromWidth) + 100vh) / 2, 100vh));
    margin-left: calc(-1 * var(--bodyMargin));
    margin-right: calc(-1 * var(--bodyMargin));
    margin-top: 1rem;
}

#scene {
    overflow: hidden;
    width: var(--sceneWidth);
    height: var(--sceneHeight);
    font-size: calc(var(--sceneHeight) / 100);
    margin: 0 auto;
    box-shadow: 0 0 0 0.1rem #ccc;
}

/* component */

#scene>.component {
    position: absolute;
    user-select: contain;
    font-size: 10em;
    transform: translateX(calc(var(--component_x) * var(--sceneWidth) - var(--component_xAlign))) translateY(calc(var(--component_y) * var(--sceneHeight) - var(--component_yAlign)));
}

#scene>.component .rawText,
#scene>.component .text {
    white-space: pre;
}

body:not(.sceneEditing) #scene>.component .rawText {
    display: none;
}

body.sceneEditing #scene>.component .text {
    display: none;
}